#!/bin/csh -f

# runs OPENCV

# example of a "run" script expected for each stereo algorithm in alg-XXX directory

if ($#argv != 4) then
  echo "usage: run <im0.png> <im1.png> <ndisp> <outdir>"
  exit 1
endif

# runs algorithm on image pair <im0.png>, <im1.png>, using <ndisp> disparity levels

# creates output in directory <outdir>:
# disparity maps disp0.pfm (dense), and optionally disp0_s.pfm (sparse - no interpolation of "holes")
# as well as time.txt (runtime of dense version in seconds)

set im0 = $1
set im1 = $2
set ndisp = $3
set outdir = $4

set tmplog = tmp-log.txt

### update 8/23/2015: use png2pgm.cpp instead to track down different
### results between linux and cygwin

# get relative path to elas executable
set p = $0:h
if ($p == $0) set p = .
set p = $p/build

@ maxdisp = $ndisp - 1

(set echo; $p/StereoOpenCV $im0 $im1 -o $outdir/disp0.pfm --max-disparity=$maxdisp --algorithm=bm --blocksize=11> $tmplog)
cat $tmplog
# create timing information based on second run
# extract seconds from output like "runtime: 0.96s  (0.68s/MP)"
awk -F'[ s]' '{print $2}' $tmplog > $outdir/time.txt

# convert output to pfm
# (unset echo; $p/../../code/disp2pfm $outdir/disp0.png $outdir/disp0.pfm)

### NOTES:

# 1. If your algorithm produces disparities in 16-bit PGM/PNG/TIF or
# floating-point TIF format, you can use the "imgcmd" tool (part of
# cvkit, see webpage) to convert to PFMs as follows:
#
#   imgcmd <dispmap> -float $outdir/disp0.pfm
#
# This will also work for 8-bit integer disparities; note however that
# the disparity ranges exceed 255, except at quarter resolution.

# 2. If your algorithm produces some "invalid" disparities (i.e., a
# sparse disparity map), they need to be mapped to INFINITY in the PFM
# file.  You can do this as follows:
#
#   imgcmd <dispmap> -float -valid 0 $maxdisp $outdir/disp0.pfm
#
# The "-valid" option sets disparities outside 0..$maxdisp to INF.

# 3. If your disparity values are scaled by a factor <s>, use the
# option -div during the conversion:
#
#   imgcmd <dispmap> -float -div <s> -valid 0 $maxdisp $outdir/disp0.pfm

# 4. If your program does not measure its runtime itself, you can use
# the unix 'time' command to produce the timing info:
#
#   /usr/bin/time -f '%e' -o $outdir/time.txt $p/elas $tmpim0 $tmpim1 \
#                            $outdir/disp0.pfm $maxdisp
#
# Note that this will also include the time to read the imput files
# and write the pfm file, which do not need to be counted.  For most
# algorithms the difference will be minor, but for fast algorithms you
# might want to measure the runtime from withing the program.
